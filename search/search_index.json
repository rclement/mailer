{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mailer Dead-simple mailer micro-service for static websites A free and open-source software alternative to contact form services such as FormSpree, to integrate a contact form seamlessly within your next static website! When building static websites and JAMStack web applications, the need for a contact form arises pretty often but requires some server-side processing. mailer provides a dead-simple micro-service (usable as a serverless function) for this purpose, enabling one to receive e-mails from a simple form using a single request, be it URL-encoded or AJAX. Proudly developed in Python using the FastAPI ASGI framework. Features Self-hostable micro-service Docker and serverless support Unicode message support OpenAPI documentation (Swagger and ReDoc) CORS domain validation Spam-bot filtering with honeypot field Google ReCaptcha v2 validation Sentry crash reporting Any SMTP-compatible back-end is supported PGP encryption support using PGP/MIME License Licensed under GNU Affero General Public License v3.0 (AGPLv3) Copyright (c) 2018 - present Romain Clement","title":"Home"},{"location":"#mailer","text":"Dead-simple mailer micro-service for static websites A free and open-source software alternative to contact form services such as FormSpree, to integrate a contact form seamlessly within your next static website! When building static websites and JAMStack web applications, the need for a contact form arises pretty often but requires some server-side processing. mailer provides a dead-simple micro-service (usable as a serverless function) for this purpose, enabling one to receive e-mails from a simple form using a single request, be it URL-encoded or AJAX. Proudly developed in Python using the FastAPI ASGI framework.","title":"Mailer"},{"location":"#features","text":"Self-hostable micro-service Docker and serverless support Unicode message support OpenAPI documentation (Swagger and ReDoc) CORS domain validation Spam-bot filtering with honeypot field Google ReCaptcha v2 validation Sentry crash reporting Any SMTP-compatible back-end is supported PGP encryption support using PGP/MIME","title":"Features"},{"location":"#license","text":"Licensed under GNU Affero General Public License v3.0 (AGPLv3) Copyright (c) 2018 - present Romain Clement","title":"License"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased Fixed Vercel deployment incompatible with cryptography>35.0.0 Changed Fix form link in homepage template Move documentation to https://rclement.github.io/mailer/ Disable Renovate dependency dashboard Update dependencies 0.10.0 - 2021-09-18 Added New API endpoint for URL-encoded form requests Type hints for tests Changed Use Python 3.9.7 Update dependencies 0.9.1 - 2021-06-17 Added 1-click deployment buttons to README and documentation (Vercel and Heroku) Changed Use Python 3.8.10 Update dependencies 0.9.0 - 2021-05-01 Added Allow to force HTTPS redirect using FORCE_HTTPS (enabled by default) Changed Use Python 3.8.9 Use python-slim instead of python-alpine base for Docker image Use mkdocs for documentation Rename all Zeit Now references to Vercel Update dependencies 0.8.1 - 2020-05-21 Added OpenAPI documentation for return model in /api/ route Changed Use Python 3.8.3 Update dependencies More robust CORS origins testing Stricter mypy rules Fixed Better handling of .env file loading for development and testing 0.8.0 - 2020-04-11 Changed Use Python 3.8.2 Use FastAPI instead of Flask Renamed API parameter recaptcha to g-recaptcha-response (default name from Google ReCaptcha) Set maximum message length to 1000 characters Disable Swagger UI in production Licensed under AGPLv3 Added Docsify documentation Simple homepage with API documentation link SMTP mailing backend support (all SMTP_* configurations) PGP encryption support using PGP/MIME (with optional contact PGP public key attachment) Static typing analysis using mypy Security checks using bandit Exhaustive testing Simple examples (ajax, ajax with recaptcha, ajax with pgp) GitHub Action workflows support Security notice in SECURITY.md Removed BREAKING : removed rate-limiting feature (all RATELIMIT_* configurations) BREAKING : removed mailer provider feature ( MAILER_PROVIDER configuration) BREAKING : removed sendgrid provider feature (all SENDGRID_* configurations) Removed RECAPTCHA_SITE_KEY from configuration Removed RECAPTCHA_ENABLED from configuration (automatically enabled when RECAPTCHA_SECRET_KEY is set) Removed SENTRY_ENABLED from configuration (automatically enabled when SENTRY_DSN is set) Travis-CI support Fixed Use non-root user in Dockerfile Use allowlist mode for .nowignore 0.7.1 - 2019-07-22 Changed Update Python dependencies Added Use flake8 as linter, black as code formatter Use pre-commit for git hooks support 0.7.0 - 2019-06-23 Fixed Force HTTPS protocol even behind reverse-proxies Changed Update Python dependencies Rename mailer.services package to mailer.providers BREAKING: rename MAILER_SERVICE config to MAILER_PROVIDER Added BREAKING: add SENDER_EMAIL config to specify the e-mail to send from (e.g. no-reply@domain.me ) 0.6.2 - 2019-05-30 Changed Update Python dependencies Migrate to Zeit Now official Python WSGI builder 0.6.1 - 2019-04-29 Security Update Python dependencies Fix jinja2 vulnerability ( CVE-2019-10906 ) Fix urllib3 vulnerability ( CVE-2019-11324 ) Fixed Fix sendgrid >= 6.0.0 breaking changes Added Travis-CI deployment to Zeit Now serverless platform 0.6.0 - 2019-03-28 Security Fix webargs vulnerability ( CVE-2019-9710 ) Fixed Werkzeug deprecation warning for ProxyFix Added Swagger OpenAPI documentation Sentry crash reporting support Removed SECRET_KEY secret config (unused) SERVER_NAME config (unused) 0.5.0 - 2019-01-20 Added Google ReCaptcha v2 validation Disabling rate-limiting Changed README.md with complete list of environment variables for configuration 0.4.0 - 2019-01-10 Added Zeit Now 2.0 serverless/lambda deployment compatibility! Changed Update Python dependencies API info endpoint ( /api ) exempted from rate-limiting and returns some more information 0.3.0 - 2019-01-10 Added Add optional honeypot param for spam-bot protection 0.2.0 - 2019-01-09 Added Add CHANGELOG.md Changed Update Python dependencies Update .example.env Update default route rate-limiting rule to 10 per hour 0.1.0 - 2018-12-21 Added Initial release of mailer Sendgrid mailing provider support","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#fixed","text":"Vercel deployment incompatible with cryptography>35.0.0","title":"Fixed"},{"location":"changelog/#changed","text":"Fix form link in homepage template Move documentation to https://rclement.github.io/mailer/ Disable Renovate dependency dashboard Update dependencies","title":"Changed"},{"location":"changelog/#0100-2021-09-18","text":"","title":"0.10.0 - 2021-09-18"},{"location":"changelog/#added","text":"New API endpoint for URL-encoded form requests Type hints for tests","title":"Added"},{"location":"changelog/#changed_1","text":"Use Python 3.9.7 Update dependencies","title":"Changed"},{"location":"changelog/#091-2021-06-17","text":"","title":"0.9.1 - 2021-06-17"},{"location":"changelog/#added_1","text":"1-click deployment buttons to README and documentation (Vercel and Heroku)","title":"Added"},{"location":"changelog/#changed_2","text":"Use Python 3.8.10 Update dependencies","title":"Changed"},{"location":"changelog/#090-2021-05-01","text":"","title":"0.9.0 - 2021-05-01"},{"location":"changelog/#added_2","text":"Allow to force HTTPS redirect using FORCE_HTTPS (enabled by default)","title":"Added"},{"location":"changelog/#changed_3","text":"Use Python 3.8.9 Use python-slim instead of python-alpine base for Docker image Use mkdocs for documentation Rename all Zeit Now references to Vercel Update dependencies","title":"Changed"},{"location":"changelog/#081-2020-05-21","text":"","title":"0.8.1 - 2020-05-21"},{"location":"changelog/#added_3","text":"OpenAPI documentation for return model in /api/ route","title":"Added"},{"location":"changelog/#changed_4","text":"Use Python 3.8.3 Update dependencies More robust CORS origins testing Stricter mypy rules","title":"Changed"},{"location":"changelog/#fixed_1","text":"Better handling of .env file loading for development and testing","title":"Fixed"},{"location":"changelog/#080-2020-04-11","text":"","title":"0.8.0 - 2020-04-11"},{"location":"changelog/#changed_5","text":"Use Python 3.8.2 Use FastAPI instead of Flask Renamed API parameter recaptcha to g-recaptcha-response (default name from Google ReCaptcha) Set maximum message length to 1000 characters Disable Swagger UI in production Licensed under AGPLv3","title":"Changed"},{"location":"changelog/#added_4","text":"Docsify documentation Simple homepage with API documentation link SMTP mailing backend support (all SMTP_* configurations) PGP encryption support using PGP/MIME (with optional contact PGP public key attachment) Static typing analysis using mypy Security checks using bandit Exhaustive testing Simple examples (ajax, ajax with recaptcha, ajax with pgp) GitHub Action workflows support Security notice in SECURITY.md","title":"Added"},{"location":"changelog/#removed","text":"BREAKING : removed rate-limiting feature (all RATELIMIT_* configurations) BREAKING : removed mailer provider feature ( MAILER_PROVIDER configuration) BREAKING : removed sendgrid provider feature (all SENDGRID_* configurations) Removed RECAPTCHA_SITE_KEY from configuration Removed RECAPTCHA_ENABLED from configuration (automatically enabled when RECAPTCHA_SECRET_KEY is set) Removed SENTRY_ENABLED from configuration (automatically enabled when SENTRY_DSN is set) Travis-CI support","title":"Removed"},{"location":"changelog/#fixed_2","text":"Use non-root user in Dockerfile Use allowlist mode for .nowignore","title":"Fixed"},{"location":"changelog/#071-2019-07-22","text":"","title":"0.7.1 - 2019-07-22"},{"location":"changelog/#changed_6","text":"Update Python dependencies","title":"Changed"},{"location":"changelog/#added_5","text":"Use flake8 as linter, black as code formatter Use pre-commit for git hooks support","title":"Added"},{"location":"changelog/#070-2019-06-23","text":"","title":"0.7.0 - 2019-06-23"},{"location":"changelog/#fixed_3","text":"Force HTTPS protocol even behind reverse-proxies","title":"Fixed"},{"location":"changelog/#changed_7","text":"Update Python dependencies Rename mailer.services package to mailer.providers BREAKING: rename MAILER_SERVICE config to MAILER_PROVIDER","title":"Changed"},{"location":"changelog/#added_6","text":"BREAKING: add SENDER_EMAIL config to specify the e-mail to send from (e.g. no-reply@domain.me )","title":"Added"},{"location":"changelog/#062-2019-05-30","text":"","title":"0.6.2 - 2019-05-30"},{"location":"changelog/#changed_8","text":"Update Python dependencies Migrate to Zeit Now official Python WSGI builder","title":"Changed"},{"location":"changelog/#061-2019-04-29","text":"","title":"0.6.1 - 2019-04-29"},{"location":"changelog/#security","text":"Update Python dependencies Fix jinja2 vulnerability ( CVE-2019-10906 ) Fix urllib3 vulnerability ( CVE-2019-11324 )","title":"Security"},{"location":"changelog/#fixed_4","text":"Fix sendgrid >= 6.0.0 breaking changes","title":"Fixed"},{"location":"changelog/#added_7","text":"Travis-CI deployment to Zeit Now serverless platform","title":"Added"},{"location":"changelog/#060-2019-03-28","text":"","title":"0.6.0 - 2019-03-28"},{"location":"changelog/#security_1","text":"Fix webargs vulnerability ( CVE-2019-9710 )","title":"Security"},{"location":"changelog/#fixed_5","text":"Werkzeug deprecation warning for ProxyFix","title":"Fixed"},{"location":"changelog/#added_8","text":"Swagger OpenAPI documentation Sentry crash reporting support","title":"Added"},{"location":"changelog/#removed_1","text":"SECRET_KEY secret config (unused) SERVER_NAME config (unused)","title":"Removed"},{"location":"changelog/#050-2019-01-20","text":"","title":"0.5.0 - 2019-01-20"},{"location":"changelog/#added_9","text":"Google ReCaptcha v2 validation Disabling rate-limiting","title":"Added"},{"location":"changelog/#changed_9","text":"README.md with complete list of environment variables for configuration","title":"Changed"},{"location":"changelog/#040-2019-01-10","text":"","title":"0.4.0 - 2019-01-10"},{"location":"changelog/#added_10","text":"Zeit Now 2.0 serverless/lambda deployment compatibility!","title":"Added"},{"location":"changelog/#changed_10","text":"Update Python dependencies API info endpoint ( /api ) exempted from rate-limiting and returns some more information","title":"Changed"},{"location":"changelog/#030-2019-01-10","text":"","title":"0.3.0 - 2019-01-10"},{"location":"changelog/#added_11","text":"Add optional honeypot param for spam-bot protection","title":"Added"},{"location":"changelog/#020-2019-01-09","text":"","title":"0.2.0 - 2019-01-09"},{"location":"changelog/#added_12","text":"Add CHANGELOG.md","title":"Added"},{"location":"changelog/#changed_11","text":"Update Python dependencies Update .example.env Update default route rate-limiting rule to 10 per hour","title":"Changed"},{"location":"changelog/#010-2018-12-21","text":"","title":"0.1.0 - 2018-12-21"},{"location":"changelog/#added_13","text":"Initial release of mailer Sendgrid mailing provider support","title":"Added"},{"location":"contributing/","text":"Contributing Setup pipenv install -d pipenv run pre-commit install --config .pre-commit-config.yml pipenv run inv qa Running locally Set and load environment variables: cp .example.env .env edit .env pipenv shell Run dev server: uvicorn mailer.app:app --host 0 .0.0.0 --port 8000 or if using VSCode, use the following configuration in .vscode/launch.json : { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"mailer:app\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"module\" : \"uvicorn\" , \"args\" : [ \"--host=0.0.0.0\" , \"--port=8000\" , \"mailer:app\" ], \"envFile\" : \"\" , \"justMyCode\" : false }, { \"name\" : \"mailer:tests\" , \"type\" : \"python\" , \"request\" : \"test\" , \"justMyCode\" : false } ] } Try it: http GET http://localhost:8000/ http POST http://localhost:8000/api/mail \\ Origin:http://localhost:8000 \\ email = \"john@doe.com\" \\ name = \"John Doe\" \\ subject = \"Test \ud83d\udcab\" \\ message = \"Hello \ud83d\udc4b\" \\ honeypot = \"\" Open the Swagger OpenAPI documentation at http://localhost:8000/docs Examples Run the examples: cd examples pipenv run python -m http.server 5000","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#setup","text":"pipenv install -d pipenv run pre-commit install --config .pre-commit-config.yml pipenv run inv qa","title":"Setup"},{"location":"contributing/#running-locally","text":"Set and load environment variables: cp .example.env .env edit .env pipenv shell Run dev server: uvicorn mailer.app:app --host 0 .0.0.0 --port 8000 or if using VSCode, use the following configuration in .vscode/launch.json : { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"mailer:app\" , \"type\" : \"python\" , \"request\" : \"launch\" , \"module\" : \"uvicorn\" , \"args\" : [ \"--host=0.0.0.0\" , \"--port=8000\" , \"mailer:app\" ], \"envFile\" : \"\" , \"justMyCode\" : false }, { \"name\" : \"mailer:tests\" , \"type\" : \"python\" , \"request\" : \"test\" , \"justMyCode\" : false } ] } Try it: http GET http://localhost:8000/ http POST http://localhost:8000/api/mail \\ Origin:http://localhost:8000 \\ email = \"john@doe.com\" \\ name = \"John Doe\" \\ subject = \"Test \ud83d\udcab\" \\ message = \"Hello \ud83d\udc4b\" \\ honeypot = \"\" Open the Swagger OpenAPI documentation at http://localhost:8000/docs","title":"Running locally"},{"location":"contributing/#examples","text":"Run the examples: cd examples pipenv run python -m http.server 5000","title":"Examples"},{"location":"deployment/","text":"Deployment You will need to choose: A mailing provider A cloud provider Most mailing providers offer a generous free-tier to get started ( Sendgrid , Mailjet , etc.) and allow usage via SMTP. Regarding cloud providers, you can start deploying with Vercel serverless platform within minutes! But any PaaS and/or Docker-compatible provider will do! Configuration The following environment variables are available: Variable Default Format Description SENDER_EMAIL \"\" no-reply@domain.me ( required ) E-mail address to send e-mail from TO_EMAIL \"\" contact@domain.me ( required ) E-mail address of the recipient TO_NAME \"\" My Name ( required ) Name of the recipient SMTP_HOST \"\" smtp.host.com ( required ) SMTP host URL SMTP_PORT \"\" 587 ( required ) SMTP host port SMTP_TLS \"\" true ( required ) SMTP host use TLS (mutually exclusive with SSL) SMTP_SSL \"\" false ( required ) SMTP host use SSL (mutually exclusive with TLS) SMTP_USER \"\" smtp-user ( required ) SMTP host user SMTP_PASSWORD \"\" smtp-password ( required ) SMTP host password (or API key) SUCCESS_REDIRECT_URL \"\" https://domain.me/contact/success ( optional ) Redirect to this URL after an e-mail has been successfully submitted using the url-encoded form API. If not set, the default behaviour is to redirect to the Origin URL from the request header ERROR_REDIRECT_URL \"\" https://domain.me/contact/error ( optional ) Redirect to this URL if an error occurred when submitting an e-mail using the url-encoded form API. If not set, the default behaviour is to redirect to the Origin URL from the request header FORCE_HTTPS 'true' 'true' ( optional ) Force HTTPS redirect CORS_ORIGINS '[]' '[\"https://domain.me\", \"https://mydomain.me\"]' ( optional ) List (JSON string) of authorized origins for CORS origins and Origin request header validation RECAPTCHA_SECRET_KEY \"\" string ( optional ) Google ReCaptcha v2 secret key PGP_PUBLIC_KEY \"\" base64 ( optional ) Base64-encoded PGP public key to encrypt e-mails with before sending to SMTP backend (generate with cat <pub.asc> \\| base64 ) SENTRY_DSN \"\" string ( optional ) Sentry crash reporting DSN Verification In order to verify that mailer is properly deployed, go to the domain or sub-domain pointing to your deployment (e.g. https://mailer.domain.me ). You should be able to display the homepage and the API documentation (e.g. https://mailer.domain.me/redoc ). If either the homepage or the API documentation do not display properly, check the logs according to your deployment method. If something feels fishy, you can always post an issue on GitHub . Serverless (e.g. Vercel) The easiest way to get started with serverless deployment is to use Vercel . You will need to create a Vercel account and to install the Vercel CLI . From the mailer codebase, create a new project on Vercel: vercel Open the project in the webapp and configure required and optional environment variables per environment (Production, Preview, Development): SENDER_EMAIL TO_EMAIL TO_NAME SMTP_HOST SMTP_PORT SMTP_TLS SMTP_SSL SMTP_USER SMTP_PASSWORD Deploy to preview environment: vercel Deploy to production environment: vercel --prod PaaS (e.g. Heroku, CleverCloud) The easiest way to get started with PaaS deployment is to use Heroku . You will need to create a Heroku account and to install the Heroku CLI . Create a project on the Heroku dashboard and add your configuration in environment variables Login to Heroku: heroku login From the mailer codebase, add the Git remote: heroku git:remote -a <my-mailer-app> Deploy: git push heroku master:master Or you can also use the containerized version! Docker The Docker image is publicly available on Docker Hub . All stable versions are automatically deployed and available after each release. The latest tag will allow to retrieve non-stable changes If you want to quickly try the Docker image: docker run --env-file .env -p 5000 :5000 rmnclmnt/mailer:latest VPS If you're feeling nerdy or a bit old-school, you are more than welcome to deploy mailer using a standard VPS from any cloud provider (AWS, OVH, etc.). We still recommend you deploy mailer using the provided Docker image for reproducibility reasons. This kind of deployment will also require some extra steps, such as setting up: A reverse-proxy link Nginx Automatic SSL/TLS certificate generation using Let's Encrypt A firewall with sensitive rules (only allow ports 80 and 443) Security policies (only allow SSH access using public key, disable root user over SSH, etc.) External intrusion protection using fail2ban etc. If you do not know (nor want to know) how to perform this kind of setup, use more developer-friendly deployment options!","title":"Deployment"},{"location":"deployment/#deployment","text":"You will need to choose: A mailing provider A cloud provider Most mailing providers offer a generous free-tier to get started ( Sendgrid , Mailjet , etc.) and allow usage via SMTP. Regarding cloud providers, you can start deploying with Vercel serverless platform within minutes! But any PaaS and/or Docker-compatible provider will do!","title":"Deployment"},{"location":"deployment/#configuration","text":"The following environment variables are available: Variable Default Format Description SENDER_EMAIL \"\" no-reply@domain.me ( required ) E-mail address to send e-mail from TO_EMAIL \"\" contact@domain.me ( required ) E-mail address of the recipient TO_NAME \"\" My Name ( required ) Name of the recipient SMTP_HOST \"\" smtp.host.com ( required ) SMTP host URL SMTP_PORT \"\" 587 ( required ) SMTP host port SMTP_TLS \"\" true ( required ) SMTP host use TLS (mutually exclusive with SSL) SMTP_SSL \"\" false ( required ) SMTP host use SSL (mutually exclusive with TLS) SMTP_USER \"\" smtp-user ( required ) SMTP host user SMTP_PASSWORD \"\" smtp-password ( required ) SMTP host password (or API key) SUCCESS_REDIRECT_URL \"\" https://domain.me/contact/success ( optional ) Redirect to this URL after an e-mail has been successfully submitted using the url-encoded form API. If not set, the default behaviour is to redirect to the Origin URL from the request header ERROR_REDIRECT_URL \"\" https://domain.me/contact/error ( optional ) Redirect to this URL if an error occurred when submitting an e-mail using the url-encoded form API. If not set, the default behaviour is to redirect to the Origin URL from the request header FORCE_HTTPS 'true' 'true' ( optional ) Force HTTPS redirect CORS_ORIGINS '[]' '[\"https://domain.me\", \"https://mydomain.me\"]' ( optional ) List (JSON string) of authorized origins for CORS origins and Origin request header validation RECAPTCHA_SECRET_KEY \"\" string ( optional ) Google ReCaptcha v2 secret key PGP_PUBLIC_KEY \"\" base64 ( optional ) Base64-encoded PGP public key to encrypt e-mails with before sending to SMTP backend (generate with cat <pub.asc> \\| base64 ) SENTRY_DSN \"\" string ( optional ) Sentry crash reporting DSN","title":"Configuration"},{"location":"deployment/#verification","text":"In order to verify that mailer is properly deployed, go to the domain or sub-domain pointing to your deployment (e.g. https://mailer.domain.me ). You should be able to display the homepage and the API documentation (e.g. https://mailer.domain.me/redoc ). If either the homepage or the API documentation do not display properly, check the logs according to your deployment method. If something feels fishy, you can always post an issue on GitHub .","title":"Verification"},{"location":"deployment/#serverless-eg-vercel","text":"The easiest way to get started with serverless deployment is to use Vercel . You will need to create a Vercel account and to install the Vercel CLI . From the mailer codebase, create a new project on Vercel: vercel Open the project in the webapp and configure required and optional environment variables per environment (Production, Preview, Development): SENDER_EMAIL TO_EMAIL TO_NAME SMTP_HOST SMTP_PORT SMTP_TLS SMTP_SSL SMTP_USER SMTP_PASSWORD Deploy to preview environment: vercel Deploy to production environment: vercel --prod","title":"Serverless (e.g. Vercel)"},{"location":"deployment/#paas-eg-heroku-clevercloud","text":"The easiest way to get started with PaaS deployment is to use Heroku . You will need to create a Heroku account and to install the Heroku CLI . Create a project on the Heroku dashboard and add your configuration in environment variables Login to Heroku: heroku login From the mailer codebase, add the Git remote: heroku git:remote -a <my-mailer-app> Deploy: git push heroku master:master Or you can also use the containerized version!","title":"PaaS (e.g. Heroku, CleverCloud)"},{"location":"deployment/#docker","text":"The Docker image is publicly available on Docker Hub . All stable versions are automatically deployed and available after each release. The latest tag will allow to retrieve non-stable changes If you want to quickly try the Docker image: docker run --env-file .env -p 5000 :5000 rmnclmnt/mailer:latest","title":"Docker"},{"location":"deployment/#vps","text":"If you're feeling nerdy or a bit old-school, you are more than welcome to deploy mailer using a standard VPS from any cloud provider (AWS, OVH, etc.). We still recommend you deploy mailer using the provided Docker image for reproducibility reasons. This kind of deployment will also require some extra steps, such as setting up: A reverse-proxy link Nginx Automatic SSL/TLS certificate generation using Let's Encrypt A firewall with sensitive rules (only allow ports 80 and 443) Security policies (only allow SSH access using public key, disable root user over SSH, etc.) External intrusion protection using fail2ban etc. If you do not know (nor want to know) how to perform this kind of setup, use more developer-friendly deployment options!","title":"VPS"},{"location":"usage/","text":"Usage Once mailer is deployed, either on your own custom domain or locally, you can start receiving e-mails, using a URL-encoded or an AJAX request. Given that these features are enabled with your deployment, the following options are available: Google ReCaptcha v2 : make sure only your domains can send e-mails through mailer PGP public key attachment: so that you can respond with end-to-end encryption to your contacts! Parameters You can find the documentation for the request parameters in the API documention of your deployment (e.g. https://mailer.domain.me/redoc ). Variable Default Format Description name \"\" string, max length: 50 ( required ) Name of the contact sending the message email \"\" string, valid e-mail ( required ) E-mail of the contact sending the message subject \"\" string, max length: 100 ( required ) Subject of the message to send message \"\" string, max length: 1000 ( required ) Body of the message to send honeypot \"\" string, empty ( required ) Body of the message to send g-recaptcha-response \"\" string ( optional ) Google ReCaptcha v2 response public_key \"\" string ( optional ) PGP public key of the contact sending the message Headers When using AJAX requests, make sure the Origin header matches one of the domains specified in the CORS_ORIGINS configuration of your deployment. HTML Form Using a standard HTML form to perform an URL-encoded request: < form action = \"https://mailer.domain.me/api/mail/form\" method = \"POST\" > < label for = \"name\" > Name </ label > < input type = \"text\" id = \"name\" name = \"name\" /> < br /> < label for = \"email\" > E-mail </ label > < input type = \"email\" id = \"email\" name = \"email\" /> < br /> < label for = \"subject\" > Subject </ label > < input type = \"text\" id = \"subject\" name = \"subject\" /> < br /> < label for = \"message\" > Message </ label > < input type = \"text\" id = \"message\" name = \"message\" /> < br /> < input type = \"hidden\" id = \"honeypot\" name = \"honeypot\" /> < input type = \"submit\" value = \"Send\" /> </ form > Fetch API Using the Fetch API to perform an AJAX request: fetch ( \"https://mailer.domain.me/api/mail\" , { method : \"POST\" , headers : { \"Content-Type\" : \"application/json\" , }, body : JSON . stringify ({ email : \"john@doe.com\" , name : \"John Doe\" , subject : \"Contact\" , message : \"Hey there! Up for a coffee?\" , \"g-recaptcha-response\" : \"azertyuiopqsdfghjklmwxcvbn\" , public_key : \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\\n\" , honeypot : \"\" , }), }); Axios Using Axios to perform an AJAX request: axios . post ( \"https://mailer.domain.me/api/mail\" , { email : \"john@doe.com\" , name : \"John Doe\" , subject : \"Contact\" , message : \"Hey there! Up for a coffee?\" , \"g-recaptcha-response\" : \"azertyuiopqsdfghjklmwxcvbn\" , public_key : \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\\n\" , honeypot : \"\" , }); Examples Explore ready-to-use examples to demonstrate how to use mailer in the docs/examples folder. To run the examples properly, do not just open the .html files, but be sure to server them with a basic HTTP server, for instance: python -m http.server <port> The reason for this requirement is that if you enable CORS protection on mailer , opening files directly in a web-browser will not set the Origin header properly, thus all requests will fail. Be sure to configure and run an instance of mailer before using them! Simple AJAX form Simple AJAX form with Google ReCaptcha Simple AJAX form with PGP encryption","title":"Usage"},{"location":"usage/#usage","text":"Once mailer is deployed, either on your own custom domain or locally, you can start receiving e-mails, using a URL-encoded or an AJAX request. Given that these features are enabled with your deployment, the following options are available: Google ReCaptcha v2 : make sure only your domains can send e-mails through mailer PGP public key attachment: so that you can respond with end-to-end encryption to your contacts!","title":"Usage"},{"location":"usage/#parameters","text":"You can find the documentation for the request parameters in the API documention of your deployment (e.g. https://mailer.domain.me/redoc ). Variable Default Format Description name \"\" string, max length: 50 ( required ) Name of the contact sending the message email \"\" string, valid e-mail ( required ) E-mail of the contact sending the message subject \"\" string, max length: 100 ( required ) Subject of the message to send message \"\" string, max length: 1000 ( required ) Body of the message to send honeypot \"\" string, empty ( required ) Body of the message to send g-recaptcha-response \"\" string ( optional ) Google ReCaptcha v2 response public_key \"\" string ( optional ) PGP public key of the contact sending the message","title":"Parameters"},{"location":"usage/#headers","text":"When using AJAX requests, make sure the Origin header matches one of the domains specified in the CORS_ORIGINS configuration of your deployment.","title":"Headers"},{"location":"usage/#html-form","text":"Using a standard HTML form to perform an URL-encoded request: < form action = \"https://mailer.domain.me/api/mail/form\" method = \"POST\" > < label for = \"name\" > Name </ label > < input type = \"text\" id = \"name\" name = \"name\" /> < br /> < label for = \"email\" > E-mail </ label > < input type = \"email\" id = \"email\" name = \"email\" /> < br /> < label for = \"subject\" > Subject </ label > < input type = \"text\" id = \"subject\" name = \"subject\" /> < br /> < label for = \"message\" > Message </ label > < input type = \"text\" id = \"message\" name = \"message\" /> < br /> < input type = \"hidden\" id = \"honeypot\" name = \"honeypot\" /> < input type = \"submit\" value = \"Send\" /> </ form >","title":"HTML Form"},{"location":"usage/#fetch-api","text":"Using the Fetch API to perform an AJAX request: fetch ( \"https://mailer.domain.me/api/mail\" , { method : \"POST\" , headers : { \"Content-Type\" : \"application/json\" , }, body : JSON . stringify ({ email : \"john@doe.com\" , name : \"John Doe\" , subject : \"Contact\" , message : \"Hey there! Up for a coffee?\" , \"g-recaptcha-response\" : \"azertyuiopqsdfghjklmwxcvbn\" , public_key : \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\\n\" , honeypot : \"\" , }), });","title":"Fetch API"},{"location":"usage/#axios","text":"Using Axios to perform an AJAX request: axios . post ( \"https://mailer.domain.me/api/mail\" , { email : \"john@doe.com\" , name : \"John Doe\" , subject : \"Contact\" , message : \"Hey there! Up for a coffee?\" , \"g-recaptcha-response\" : \"azertyuiopqsdfghjklmwxcvbn\" , public_key : \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\n...\\n-----END PGP PUBLIC KEY BLOCK-----\\n\" , honeypot : \"\" , });","title":"Axios"},{"location":"usage/#examples","text":"Explore ready-to-use examples to demonstrate how to use mailer in the docs/examples folder. To run the examples properly, do not just open the .html files, but be sure to server them with a basic HTTP server, for instance: python -m http.server <port> The reason for this requirement is that if you enable CORS protection on mailer , opening files directly in a web-browser will not set the Origin header properly, thus all requests will fail. Be sure to configure and run an instance of mailer before using them! Simple AJAX form Simple AJAX form with Google ReCaptcha Simple AJAX form with PGP encryption","title":"Examples"}]}