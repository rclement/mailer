name: Mailer CI/CD

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.6'
      - name: Cache Python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Run QA
        run: |
          pipenv run inv qa
          pipenv run coverage xml
      - name: Publish code coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  build-docker:
    name: Docker build
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.ref, 'master') || contains(github.ref, 'tags')

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/mailer
      IMAGE_TAG: latest

    steps:
      - uses: actions/checkout@v2
      - name: Select Docker image tag (production only)
        if: contains(github.ref, 'tags')
        run: echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Pull latest Docker image
        run: docker pull $IMAGE_NAME:latest || true
      - name: Build Docker image (${{ env.IMAGE_TAG }})
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG --cache-from $IMAGE_NAME:latest .
      - name: Log into Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-vercel:
    name: Vercel deployment
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.ref, 'master') || contains(github.ref, 'tags')

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_ENV_ARG:

    steps:
      - uses: actions/checkout@v2
      - name: Select Vercel environment (production only)
        if: contains(github.ref, 'tags')
        run: echo "VERCEL_ENV_ARG=--prod" >> $GITHUB_ENV
      - name: Deploy to Vercel
        run: |
          vercel deploy --confirm --token '${{ secrets.VERCEL_TOKEN }}' $VERCEL_ENV_ARG

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.ref, 'master')

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9.6'
      - name: Cache Python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      - name: Build documentation
        run: |
          pipenv run mkdocs build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GH_PERSONAL_TOKEN }}
          publish_dir: ./site
          publish_branch: gh-pages
