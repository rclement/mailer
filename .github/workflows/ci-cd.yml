name: Mailer CI/CD

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8.5'
      - name: Cache Python modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pipenv
          pipenv install --dev --deploy
      # - name: Check environment
      #   run: pipenv check
      - name: Run QA
        run: |
          pipenv run inv qa
          pipenv run coverage xml
      - name: Publish code coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

  build-docker:
    name: Docker build
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.ref, 'master') || contains(github.ref, 'tags')

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/mailer
      IMAGE_TAG: latest

    steps:
      - uses: actions/checkout@v2
      - name: Select Docker image tag (production only)
        if: contains(github.ref, 'tags')
        run: echo "::set-env name=IMAGE_TAG::${GITHUB_REF##*/}"
      - name: Pull latest Docker image
        run: docker pull $IMAGE_NAME:latest || true
      - name: Build Docker image (${{ env.IMAGE_TAG }})
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG --cache-from $IMAGE_NAME:latest .
      - name: Log into Docker Registry
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:$IMAGE_TAG

  deploy-now:
    name: Zeit Now deployment
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.ref, 'master') || contains(github.ref, 'tags')

    env:
      NOW_ORG_ID: ${{ secrets.NOW_ORG_ID }}
      NOW_PROJECT_ID: ${{ secrets.NOW_PROJECT_ID }}
      NOW_ENV_ARG:

    steps:
      - uses: actions/checkout@v2
      - name: Select Zeit Now environment (production only)
        if: contains(github.ref, 'tags')
        run: echo "::set-env name=NOW_ENV_ARG::--prod"
      - name: Register Zeit Now secrets
        run: |
          now secrets \
            --token '${{ secrets.NOW_TOKEN }}' \
            add mailer-smtp-password '${{ secrets.MAILER_SMTP_PASSWORD }}' || true
          now secrets \
            --token '${{ secrets.NOW_TOKEN }}' \
            add mailer-recaptcha-secret-key '${{ secrets.MAILER_RECAPTCHA_SECRET_KEY }}' || true
      - name: Deploy to Zeit Now
        run: |
          now deploy \
            --confirm \
            --token '${{ secrets.NOW_TOKEN }}' \
            $NOW_ENV_ARG \
            -e SENDER_EMAIL='${{ secrets.MAILER_SENDER_EMAIL }}' \
            -e TO_EMAIL='${{ secrets.MAILER_TO_EMAIL }}' \
            -e TO_NAME='${{ secrets.MAILER_TO_NAME }}' \
            -e SMTP_HOST='${{ secrets.MAILER_SMTP_HOST }}' \
            -e SMTP_PORT='${{ secrets.MAILER_SMTP_PORT }}' \
            -e SMTP_TLS='${{ secrets.MAILER_SMTP_TLS }}' \
            -e SMTP_SSL='${{ secrets.MAILER_SMTP_SSL }}' \
            -e SMTP_USER='${{ secrets.MAILER_SMTP_USER }}' \
            -e SMTP_PASSWORD=@mailer-smtp-password \
            -e CORS_ORIGINS='${{ secrets.MAILER_CORS_ORIGINS }}' \
            -e PGP_PUBLIC_KEY='${{ secrets.MAILER_PGP_PUBLIC_KEY }}' \
            -e SENTRY_DSN='${{ secrets.MAILER_SENTRY_DSN }}'

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.ref, 'master')

    steps:
      - uses: actions/checkout@v2
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GH_PERSONAL_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
